package com.cloudkaptan.utils;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.Serializable;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.databind.JsonNode;
import io.restassured.RestAssured;
import io.restassured.response.Response;

public class ApiHelper {

    public static Object readJsonApiDataFor(String container, String key) throws IOException, ParseException {
		JSONParser jsonParser = new JSONParser();
		Object obj = null;
		try {
			obj = jsonParser.parse(new FileReader("src/resources/configuration/ApiConfiguration.json"));
			return ((JSONObject) ((JSONObject) obj).get(container)).get(key);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		} catch (NullPointerException e) {
			e.printStackTrace();
			return null;
		} catch (ClassCastException e) {
			e.printStackTrace();
			return null;
		} catch (org.json.simple.parser.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

    /**
	 * TestRail Base URL. <br>
	 * 
	 * @location src/main/resources/configurations/apiConfig.json
	 */
	public static final String TESTRAIL_BASE_URL = "https://cloudkaptanmain.testrail.io";
	/**
	 * TestRail Username. <br>
	 * 
	 * @location src/main/resources/configurations/apiConfig.json
	 */
	public static final String TESTRAIL_USERNAME = "vivek.biswas@cloudkaptan.com";
	/**
	 * TestRail Token from Account Settings. <br>
	 * 
	 * @location src/main/resources/configurations/apiConfig.json
	 */
	public static final String TESTRAIL_TOKEN = "tKwBgLXAw1BIib2SLi07-qO06M7I34MCcJv7DctKx";

	public static void getCase(String case_id) {
		Response response = RestAssured.given()
				.auth().preemptive().basic(TESTRAIL_USERNAME, TESTRAIL_TOKEN).log().all()
				.pathParam("case_id", case_id).log().all()
				.when().get(TESTRAIL_BASE_URL + EndPoint.GET_CASE);

		response.prettyPrint();
	}

	public static void getMilestone(String milestone_id) {
		Response response = RestAssured.given()
				.auth().preemptive().basic(TESTRAIL_USERNAME, TESTRAIL_TOKEN).log().all()
				.pathParam("milestone_id", milestone_id).log().all()
				.when().get(TESTRAIL_BASE_URL + EndPoint.GET_MILESTONE);
		response.prettyPrint();
	}

	public static void getMilestones(String project_id) {
		Response response = RestAssured.given()
				.auth().preemptive().basic(TESTRAIL_USERNAME, TESTRAIL_TOKEN).log().all()
				.pathParam("project_id", project_id).log().all()
				.when().get(TESTRAIL_BASE_URL + EndPoint.GET_MILESTONES);
		response.prettyPrint();
	}

	public static Map<String, String> getTestsFromRuns(String run_id) {
		RestAssured.baseURI = TESTRAIL_BASE_URL;
		Response response = RestAssured.given()
				.auth().preemptive().basic(TESTRAIL_USERNAME, TESTRAIL_TOKEN).log().all()
				.pathParam("run_id", run_id).log().all()
				.when().get(EndPoint.GET_TESTS);

		response.then().log().all(true).statusCode(200);
		Map<String, String> testId = new HashMap<String, String>();

		ObjectMapper mapper = new ObjectMapper();
		try {
			JsonNode rootNode = mapper.readTree(response.asString());
			JsonNode testsNode = rootNode.get("tests");

			for (JsonNode testNode : testsNode) {
				testId.put(testNode.get("case_id").asText(), testNode.get("id").asText());
			}
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}

		Properties testIdProperties = new Properties();
		testIdProperties.putAll(testId);
		try {
			testIdProperties.store(new FileOutputStream("src/resources/TestRail/TestRailTestMap.properties"),
					"This file has been autogenerated to map the Test Id with the Case In in TestRail");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return testId;
	}

	public static void sendTestResultsToTest(String test_id, int testStatus, String testComment) {
		Map<String, Serializable> data = new HashMap<>();
		data.put("status_id", testStatus);
		data.put("comment", testComment);
		sendTestResultsToTest(test_id, data);
	}

	@SuppressWarnings("unchecked")
	public static void sendTestResultsToTest(String test_id, Map<String, Serializable> data) {
		RestAssured.baseURI = TESTRAIL_BASE_URL;
		JSONObject json = null;
		try (Reader reader = new FileReader("src/resources/TestRail/payloads/sendTestResults.json")) {
			JSONParser parser = new JSONParser();
			json = (JSONObject) parser.parse(reader);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (org.json.simple.parser.ParseException e) {
			e.printStackTrace();
		}

		if (json != null) {
			json.put("status_id", data.get("status_id"));
			json.put("comment", data.get("comment"));
			json.put("elapsed", "21.54s");
		}

		Response response = RestAssured.given()
				.auth().preemptive().basic(TESTRAIL_USERNAME, TESTRAIL_TOKEN)
				.pathParam("test_id", test_id).contentType("application/json").log().all()
				.when().body(json).post(EndPoint.ADD_RESULT);
		response.then().log().all(true).statusCode(200);
	}
}
